1. Write a Query to add a column package_stat to the table orders.

exam_sql=# alter table orders add column pkg_stat varchar(20);
ALTER TABLE
exam_sql=# \d orders
                         Table "public.orders"
    Column    |         Type          | Collation | Nullable | Default
--------------+-----------------------+-----------+----------+---------
 order_id     | integer               |           | not null |
 order_date   | date                  |           | not null |
 shipped_date | date                  |           |          |
 deliver      | character varying(15) |           | not null |
 customer_id  | integer               |           | not null |
 pkg_stat     | character varying(20) |           |          |
Indexes:
    "orders_pkey" PRIMARY KEY, btree (order_id)
Foreign-key constraints:
    "orders_customer_id_fkey" FOREIGN KEY (customer_id) REFERENCES customers(customer_id)



2. Write a Query to change the package_stat column of orders table with 'not available' for all orders.

exam_sql=# update orders set pkg_stat = 'not available';

3.Write a Query to delete a row from customers table where credit_limit is 0.00

---> delete from customers where creditlimit = 0.00;



Write SELECT statements to achieve the following:

1. Write a Query to display the first_name with the occurrence of ‘el’ in the customers tables.

exam_sql=# select first_name from customers where first_name LIKE '%el%';
 first_name
------------
 Atelier
 Nelson
 Keitel
 Saveley
(4 rows)

2.Write a Query to prepare a list with customer name ,customer_id ,order_id for the customers whose delivery status is shipped.

exam_sql=# select c.first_name, c.last_name, c.customer_id, o.order_id, o.deliver from customers as c join orders as o on c.customer_id=o.customer_id;
   first_name    | last_name | customer_id | order_id | deliver
-----------------+-----------+-------------+----------+---------
 Ferguson        | Peter     |         114 |    10100 | Shipped
 Piestrzeniewicz | Zbyszek   |         125 |    10101 | Shipped
 Murphy          | Julie     |         129 |    10102 | Shipped
 Bergulfsen      | Jonas     |         121 |    10103 | Shipped
 Freyre          | Diego     |         141 |    10104 | Shipped
 Petersen        | Jytte     |         145 |    10105 | Shipped
(6 rows)

3. Write a Query to get the number of customers with the creditLimit greater than 50000.


---> exam_sql=# select count(customer_id) from customers where creditlimit > 50000;
     count
     -------
     13
    (1 row)

4.Write a Query to display the customer_id, name ( first name and last name ), order_id and deliver for all customers.

---> exam_sql=# select c.customer_id, c.first_name, c.last_name, o.order_id, o.deliver from customers as c left join orders as o on c.customer_id=o.order_id;



5.Write a Query to customer name in order of creditLimit smallest to highest.

---> select first_name,last_name from customers order by creditlimit;



6.Write a stored procedure by name order_day. The procedure should show the customer_id and the day on which he had made the order.
--->   create procedure order_day(q int)
        language plpgsql 
        as $$  
        begin 
         update s set customer_id = q where id = 1; 
         update s set order_date = (select order_date from  orders where customer_id=q) where id = 1; 
         end; 
         $$;
CREATE PROCEDURE
exam_sql=# insert into s (id) values(1);
INSERT 0 1
exam_sql=# call order_day(141);
CALL
exam_sql=# table s;
 customer_id | order_date | id
-------------+------------+----
         141 | 2003-01-31 |  1


  7. Write a stored function by the name of cutomer_search. The stored function should return the maximum creditLimit made by any customer.
    CREATE FUNCTION cs1(s integer)
RETURNS numeric LANGUAGE plpgsql
AS $$
declare
    cred numeric;
BEGIN
   SELECT creditlimit into cred from customers where customer_id = s;
   RETURN cred;
END; $$ ;
 select cs1(141);


1. Display only the EMPNO and ENAME columns from EMP table.

---> select empno,ename from emp;

2. Display all employees who are CLERKs and the MANAGERs.

--->  select * from emp where job IN ('CLERK','MANAGER');

3. Display the ENAME and JOB for all employees who belong to the same DEPTNO as employee ‘KING’.

--->  select ename,job from emp where deptno in (select deptno from emp where ename = 'KING');

4. Find the names of all employees hired in the month of February (of any year).

--->  select ename from emp where extract(month from hiredate) = 2;

5. Display the employees in descending order of DEPTNO.

--->  select * from emp order by deptno desc;

6.   Display the employee name and employee number of the employees with the headings as NUMBER and NAME

---> select ename as name,empno as number from emp;

7.  Find the names of all employees who were hired on the last day of the month.

--->  select ename from emp where extract(day from hiredate) in (28,30,31,29);

8. Find the name of the employee who is receiving the maximum salary.

---> select ename from emp where sal = (select max(sal) from emp);

9. Display the sum of SAL for all the employees belonging to DEPTNO 10.

--->  select sum(sal) from emp where deptno =10;

10. Display the rows where JOB column ends with the letter ‘T’.

---> select * from emp where job like '%T';

11. Write a stored procedure to convert a temperature in Fahrenheit (F) to its equivalent in Celsius (C). The required formula is:- C= (F-32)*5/9.
Insert the temperature in Centigrade into TEMPP table. Calling program for the stored procedure need not be written.

---> create procedure temp(celu float) language plpgsql as $$ declare c float; begin c:=(Celu-32)*5/9; insert into temperature (cel,fare) values(celu,c); end; $$;
CREATE PROCEDURE
exam_sql=# call temp(33);
CALL
exam_sql=# show table temperature;

12.. Write a stored function by the name of Num_cube. The stored function should return the cube of a number ‘N’. The number ‘N’ should be passed to the stored function as a
parameter. Calling program for the stored function need not be written.

--->  create function num_cube(n int) returns int as $$ begin n:= n*n*n; return n; end; $$ language plpgsql;
CREATE FUNCTION
 









































